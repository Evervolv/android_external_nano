This is nano.info, produced by makeinfo version 5.1 from nano.texi.

INFO-DIR-SECTION Editors
START-INFO-DIR-ENTRY
* nano: (nano).                 Small and friendly text editor.
END-INFO-DIR-ENTRY


File: nano.info,  Node: Top,  Next: Introduction,  Up: (dir)

nano Command Manual
*******************

This manual documents GNU 'nano', a small and friendly text editor.

* Menu:

* Introduction::
* Editor Basics::
* Online Help::
* Feature Toggles::
* Nanorc Files::
* The File Browser::
* Pico Compatibility::
* Building and Configure Options::


File: nano.info,  Node: Introduction,  Next: Editor Basics,  Prev: Top,  Up: Top

1 Introduction
**************

GNU 'nano' is a small and friendly text editor.  Besides basic text
editing, 'nano' offers many extra features, like an interactive
search-and-replace, go-to-line-and-column-number, auto-indentation,
feature toggles, internationalization support, and filename tab
completion.

* Menu:

* Overview::
* Command Line Options::


File: nano.info,  Node: Overview,  Next: Command Line Options,  Up: Introduction

1.1 Overview
============

The original goal for 'nano' was a complete bug-for-bug compatible
emulation of Pico, but 'nano''s current goal is to be as compatible as
possible while offering a superset of Pico's functionality.  See *Note
Pico Compatibility::, for more info.

   The usual way to invoke 'nano' is:

     'nano [OPTION]... [FILE]'

   But it is also possible to edit several files in a row.
Additionally, the cursor can be put on a desired line number by adding
this number with a plus sign before any filename, and even in a desired
column by adding it with a comma.  So the complete synopsis is:

     'nano [OPTION]... [[+LINE] FILE]...'

     'nano [OPTION]... [[+,COLUMN] FILE]...'

     'nano [OPTION]... [[+LINE,COLUMN] FILE]...'

   Email bug reports to <nano@nano-editor.org>.


File: nano.info,  Node: Command Line Options,  Prev: Overview,  Up: Introduction

1.2 Command Line Options
========================

'nano' takes the following options from the command line:

'+<line>,<column>'
     Start at line number <line> and column number <column> (at least
     one of which must be specified) instead of the default of line 1,
     column 1.

'-A, --smarthome'
     Make the Home key smarter.  When Home is pressed anywhere but at
     the very beginning of non-whitespace characters on a line, the
     cursor will jump to that beginning (either forwards or backwards).
     If the cursor is already at that position, it will jump to the true
     beginning of the line.

'-B, --backup'
     When saving a file, back up the previous version of it to the
     current filename suffixed with a ~.

'-C <dir>, --backupdir=<dir>'
     Set the directory where 'nano' puts unique backup files if file
     backups are enabled.

'-D, --boldtext'
     Use bold text instead of reverse video text.

'-E, --tabstospaces'
     Convert typed tabs to spaces.

'-F, --multibuffer'
     Enable multiple file buffers, if available.

'-G, --locking'
     Enable vim-style file locking when editing files.

'-H, --historylog'
     Log search and replace strings to ~/.nano_history, so they can be
     retrieved in later sessions, if nanorc support is available.

'-I, --ignorercfiles'
     Don't look at SYSCONFDIR/nanorc or ~/.nanorc, if nanorc support is
     available.

'-K, --rebindkeypad'
     Interpret the numeric keypad keys so that they all work properly.
     You should only need to use this option if they don't, as mouse
     support won't work properly with this option enabled.

'-L, --nonewlines'
     Don't add newlines to the ends of files.

'-N, --noconvert'
     Disable automatic conversion of files from DOS/Mac format.

'-O, --morespace'
     Use the blank line below the titlebar as extra editing space.

'-P, --poslog'
     Log and later read back the location of the cursor and place it
     there again.

'-Q <str>, --quotestr=<str>'
     Set the quoting string for justifying.  The default value is

          '^([ \t]*[|>:}#])+'

     if extended regular expression support is available, or "> "
     otherwise.  Note that '\t' above stands for a literal Tab
     character.

'-R, --restricted'
     Restricted mode: don't read or write to any file not specified on
     the command line; don't read any nanorc files; don't allow
     suspending; don't allow a file to be appended to, prepended to, or
     saved under a different name if it already has one; don't use
     backup files nor spell checking.  This restricted mode is also
     accessible by invoking 'nano' with any name beginning with 'r'
     (e.g.  "rnano").

'-S, --smooth'
     Enable smooth scrolling.  Text will scroll line-by-line, instead of
     the usual chunk-by-chunk behavior.

'-T <number>, --tabsize=<number>'
     Set the displayed tab length to <number> columns.  The value of
     <number> must be greater than 0.  The default value is 8.

'-U, --quickblank'
     Do quick statusbar blanking.  Statusbar messages will disappear
     after 1 keystroke instead of 25.  Note that -c overrides this.

'-V, --version'
     Show the current version number and exit.

'-W, --wordbounds'
     Detect word boundaries more accurately by treating punctuation
     characters as parts of words.

'-Y <str>, --syntax=<str>'
     Specify a specific syntax from the nanorc to use for highlighting,
     if available.  See *Note Syntax Highlighting::, for more info.

'-c, --const'
     Constantly display the cursor position and line number on the
     statusbar.  Note that this overrides -U.

'-d, --rebinddelete'
     Interpret the Delete key differently so that both Backspace and
     Delete work properly.  You should only need to use this option if
     Backspace acts like Delete on your system.

'-h, --help'
     Show a summary of command-line options and exit.

'-i, --autoindent'
     Automatically indent new lines to the same number of spaces and
     tabs as the previous line.

'-k, --cut'
     Make the 'Cut Text' command (normally ^K) cut from the current
     cursor position to the end of the line, instead of cutting the
     entire line.

'-l, --nofollow'
     When writing files, if the given file is a symbolic link, it is
     removed and a new file is created.

'-m, --mouse'
     Enable mouse support, if available for your system.  When enabled,
     mouse clicks can be used to place the cursor, set the mark (with a
     double click), and execute shortcuts.  The mouse will work in the X
     Window System, and on the console when gpm is running.  Text can
     still be selected through dragging by holding down the Shift key.

'-n, --noread'
     Treat any name given on the command line as a new file.  This
     allows 'nano' to write to named pipes: it will start with a blank
     buffer, and will write to the pipe when the user saves the "file".
     This way 'nano' can be used as an editor in combination with for
     instance 'gpg' without having to write sensitive data to disk
     first.

'-o <dir>, --operatingdir=<dir>'
     Set operating directory.  Makes 'nano' set up something similar to
     a chroot.

'-p, --preserve'
     Preserve the ^Q (XON) and ^S (XOFF) sequences so data being sent to
     the editor can be can be stopped and started.

'-q, --quiet'
     Do not report errors in the nanorc file and ask them to be
     acknowledged by pressing Enter at startup.

'-r <number>, --fill=<number>'
     Hard-wrap lines at column <number> (by inserting a newline
     character).  If the given value is 0 or less, wrapping will occur
     at the width of the screen minus the given amount, allowing the
     wrapping width to vary along with the width of the screen if and
     when it is resized.  The default value is -8.  This option
     conflicts with -w - the last one given takes effect.

'-s <program>, --speller=<program>'
     Invoke the given program as the spell checker.  By default, 'nano'
     uses the command specified in the SPELL environment variable, or,
     if SPELL is not set, its own interactive spell checker that
     requires the 'spell' program to be installed on your system.

'-t, --tempfile'
     Don't ask whether or not to save the current contents of the file
     when exiting, assume yes.  This is most useful when using 'nano' as
     the composer of a mailer program.

'-u, --undo'
     Enable the experimental generic-purpose undo/redo code.  The
     default undo and redo shortcuts are Meta-U and Meta-E,
     respectively.

'-v, --view'
     Don't allow the contents of the file to be altered.  Note that this
     option should NOT be used in place of correct file permissions to
     implement a read-only file.

'-w, --nowrap'
     Don't hard-wrap long lines at any length.  This option conflicts
     with -r - the last one given takes effect.

'-x, --nohelp'
     Expert Mode: don't show the Shortcut Lists at the bottom of the
     screen.  This affects the location of the statusbar as well, as in
     Expert Mode it is located at the very bottom of the editor.

     Note: When accessing the help system, Expert Mode is temporarily
     disabled to display the help-system navigation keys.

'-z, --suspend'
     Enable the ability to suspend 'nano' using the system's suspend
     keystroke (usually ^Z).

'-$, --softwrap'
     Enable 'soft wrapping'.  This will make 'nano' attempt to display
     the entire contents of any line, even if it is longer than the
     screen width, by continuing it over multiple screen lines.  Since
     '$' normally refers to a variable in the Unix shell, you should
     specify this option last when using other options (e.g.  'nano
     -wS$') or pass it separately (e.g.  'nano -wS -$').

'-a, -b, -e, -f, -g, -j'
     Ignored, for compatibility with Pico.


File: nano.info,  Node: Editor Basics,  Next: Online Help,  Prev: Introduction,  Up: Top

2 Editor Basics
***************

* Menu:

* Entering Text::
* Special Functions::
* The Cutbuffer::
* The Mark::
* The Titlebar::
* The Statusbar::
* Shortcut Lists::
* Using the Mouse::


File: nano.info,  Node: Entering Text,  Next: Special Functions,  Up: Editor Basics

2.1 Entering Text
=================

'nano' is a "modeless" editor.  All keystrokes, with the exception of
Control and Meta key sequences, enter text into the file being edited.
All key sequences in 'nano' are entered using the keyboard.


File: nano.info,  Node: Special Functions,  Next: The Cutbuffer,  Prev: Entering Text,  Up: Editor Basics

2.2 Special Functions
=====================

Special functions use the Control key (Ctrl), displayed in the help and
shortcut lists as ^; the Meta key (Alt or Cmd), displayed as M-; or the
Escape key (Esc).

   * Control key sequences are entered by holding down the Ctrl key and
     pressing the desired key, or by pressing the Esc key twice and then
     pressing the desired key.
   * Pressing the Esc key twice and then typing a three-digit number
     from 000 to 255 will enter the character with the corresponding
     value.
   * Meta key sequences are entered by holding down the Meta key
     (normally the Alt key) and pressing the desired key, or by pressing
     the Esc key once and then pressing the desired key.  Certain
     operating systems "swallow" the Alt key so that it never reaches
     the application; if your operating system does this, you should use
     the Esc key to generate Meta key sequences.


File: nano.info,  Node: The Cutbuffer,  Next: The Mark,  Prev: Special Functions,  Up: Editor Basics

2.3 The Cutbuffer
=================

Text can be cut from a file, a whole line at a time, by using the 'Cut
Text' command (default key binding: ^K). The cut line is stored in the
cutbuffer.  Consecutive strokes of ^K will add each cut line to this
buffer, but a ^K after any other keystroke will overwrite the entire
cutbuffer.

   The contents of the cutbuffer can be pasted back into the file with
the 'Uncut Text' command (default key binding: ^U).

   A line of text can be copied into the cutbuffer (without cutting it)
with the 'Copy Text' command (default key binding: M-6).


File: nano.info,  Node: The Mark,  Next: The Titlebar,  Prev: The Cutbuffer,  Up: Editor Basics

2.4 The Mark
============

Text can be selected by first 'setting the Mark' (default key bindings:
^6 and M-A) and then moving the cursor to the other end of the portion
to be selected.  The selected portion of text will be highlighted in
reverse video (or in bold if you set the boldtext option).  This
selection can now be cut or copied in its entirety with a single ^K or
M-6.  Or the selection can be used to limit the scope of a
search-and-replace (^\) or spell-checking session (^T).

   Cutting or copying selected text will toggle the mark off
automatically.  If necessary, it can be toggled off manually with
another ^6 or M-A.


File: nano.info,  Node: The Titlebar,  Next: The Statusbar,  Prev: The Mark,  Up: Editor Basics

2.5 The Titlebar
================

The titlebar is the line displayed at the top of the editor.  There are
three sections: left, center and right.  The section on the left
displays the version of 'nano' being used.  The center section displays
the current filename, or "New Buffer" if the file has not yet been
named.  The section on the right will display "Modified" if the file has
been modified since it was last saved or opened.

   Special modes: When 'nano' is in "File browser" mode, the center
section will display the current directory instead of the filename.  See
*Note The File Browser::, for more info.


File: nano.info,  Node: The Statusbar,  Next: Shortcut Lists,  Prev: The Titlebar,  Up: Editor Basics

2.6 The Statusbar
=================

The statusbar is the third line from the bottom of the screen, or the
bottom line in Expert Mode.  See *Note Expert Mode::, for more info.  It
shows important and informational messages.  Any error messages that
occur from using the editor will appear on the statusbar.  Any questions
that are asked of the user will be asked on the statusbar, and any user
input (search strings, filenames, etc.)  will be input on the statusbar.


File: nano.info,  Node: Shortcut Lists,  Next: Using the Mouse,  Prev: The Statusbar,  Up: Editor Basics

2.7 Shortcut Lists
==================

The Shortcut Lists are the two lines at the bottom of the screen which
show some of the more commonly used functions in the editor.


File: nano.info,  Node: Using the Mouse,  Prev: Shortcut Lists,  Up: Editor Basics

2.8 Using the Mouse
===================

When mouse support has been configured and enabled, a single mouse click
places the cursor at the indicated position.  Clicking a second time in
the same position toggles the mark.  Clicking in the shortcut list
executes the selected shortcut.  To be able to select text with the left
button, or paste text with the middle button, hold down the Shift key
during those actions.

   The mouse will work in the X Window System, and on the console when
gpm is running.


File: nano.info,  Node: Online Help,  Next: Feature Toggles,  Prev: Editor Basics,  Up: Top

3 Online Help
*************

The online help system in 'nano' is available by pressing ^G. It is
fairly self-explanatory, documenting the various parts of the editor and
available keystrokes.  Navigation is via the ^Y (Page Up) and ^V (Page
Down) keys.  ^X exits the help system.


File: nano.info,  Node: Feature Toggles,  Next: Nanorc Files,  Prev: Online Help,  Up: Top

4 Feature Toggles
*****************

Toggles allow you to change certain aspects of the editor that would
normally be done via command-line options.  They are invoked via Meta
key sequences.  See *Note Special Functions::, for more info.  The
following global toggles are available:

'Backup Files Toggle (Meta-B)'
     toggles the -B ('--backup') command line option.

'Constant Cursor Position Display Toggle (Meta-C)'
     toggles the -c ('--const') command line option.

'Multiple File Buffers Toggle (Meta-F)'
     toggles the -F ('--multibuffer') command line option.

'Smart Home Key Toggle (Meta-H)'
     toggles the -A ('--smarthome') command line option.

'Auto Indent Toggle (Meta-I)'
     toggles the -i ('--autoindent') command line option.

'Cut To End Toggle (Meta-K)'
     toggles the -k ('--cut') command line option.

'Long Line Wrapping Toggle (Meta-L)'
     toggles the -w ('--nowrap') command line option.

'Mouse Support Toggle (Meta-M)'
     toggles the -m ('--mouse') command line option.

'No Conversion From DOS/Mac Format Toggle (Meta-N)'
     toggles the -N ('--noconvert') command line option.

'More Space For Editing Toggle (Meta-O)'
     toggles the -O ('--morespace') command line option.

'Whitespace Display Toggle (Meta-P)'
     toggles whitespace display mode if you have a "whitespace" option
     in your nanorc.  See *Note Whitespace::, for more info.

'Tabs to Spaces Toggle (Meta-Q)'
     toggles the -E ('--tabstospaces') command line option.

'Smooth Scrolling Toggle (Meta-S)'
     toggles the -S ('--smooth') command line option.

'Expert/No Help Toggle (Meta-X)'
     toggles the -x ('--nohelp') command line option.

'Color Syntax Highlighting Toggle (Meta-Y)'
     toggles color syntax highlighting if you have color syntaxes in
     your nanorc.  See *Note Syntax Highlighting::, for more info.

'Suspend Toggle (Meta-Z)'
     toggles the -z ('--suspend') command line option.

'Soft Wrapping Toggle (Meta-$)'
     toggles the -$ ('--softwrap') command line option.


File: nano.info,  Node: Nanorc Files,  Next: The File Browser,  Prev: Feature Toggles,  Up: Top

5 Nanorc Files
**************

The nanorc files contain the default settings for 'nano'.  They should
be in Unix format, not in DOS or Mac format.  During startup, 'nano'
will first read the system-wide settings, from /etc/nanorc, and then the
user-specific settings, from ~/.nanorc.

   A nanorc file accepts a series of "set" and "unset" commands, which
can be used to configure 'nano' on startup without using command-line
options.  Additionally, there are some commands to define syntax
highlighting and to rebind keys - *Note Syntax Highlighting::, and *Note
Rebinding Keys::.  'nano' will read one command per line.

   Options in nanorc files take precedence over 'nano''s defaults, and
command-line options override nanorc settings.  Options are also unset
by default, except for those that take arguments.

   Quotes inside string parameters don't have to be escaped with
backslashes.  The last double quote in the string will be treated as its
end.  For example, for the "brackets" option, '""')>]}"' will match '"',
''', ')', '>', ']', and '}'.

* Menu:

* Settings::
* Syntax Highlighting::
* Rebinding Keys::


File: nano.info,  Node: Settings,  Next: Syntax Highlighting,  Up: Nanorc Files

5.1 Settings
============

The supported settings in a nanorc file are:

'set/unset allow_insecure_backup'
     When backing up files, allow the backup to succeed even if its
     permissions can't be (re)set due to special OS considerations.  You
     should NOT enable this option unless you are sure you need it.

'set/unset autoindent'
     Use auto-indentation.

'set/unset backup'
     When saving a file, back up the previous version of it to the
     current filename suffixed with a tilde ('~').

'set backupdir "directory"'
     Set the directory where 'nano' puts unique backup files, if file
     backups are enabled.

'set/unset backwards'
     Do backwards searches by default.

'set/unset boldtext'
     Use bold instead of reverse video for the titlebar, statusbar, key
     combos, and selected text.  This can be overridden for the first
     three by setting the options "titlecolor", "statuscolor", and
     "keycolor".

'set brackets "string"'
     Set the characters treated as closing brackets when justifying
     paragraphs.  This may not include blank characters.  Only closing
     punctuation (see "punct"), optionally followed by the specified
     closing brackets, can end sentences.  The default value is

          '""')>]}"'

'set/unset casesensitive'
     Do case-sensitive searches by default.

'set/unset const'
     Constantly display the cursor position in the status bar.

'set/unset cut'
     Use cut-to-end-of-line by default, instead of cutting the whole
     line.

'set fill "n"'
     Hard-wrap lines at column number "n".  If "n" is 0 or less, the
     maximum line length will be the screen width less "n" columns.  The
     default value is -8.

'set functioncolor fgcolor,bgcolor'
     Specify the color combination to use for the function descriptions
     in the two help lines at the bottom of the screen.  See "set
     titlecolor" for more details.

'set/unset historylog'
     Enable ~/.nano_history for saving and reading search/replace
     strings.

'set keycolor fgcolor,bgcolor'
     Specify the color combination to use for the shortcut key combos in
     the two help lines at the bottom of the screen.  See "set
     titlecolor" for more details.

'set/unset locking'
     Enable vim-style lock-files for when editing files.

'set matchbrackets "string"'
     Set the opening and closing brackets that can be found by bracket
     searches.  This may not include blank characters.  The opening set
     must come before the closing set, and the two sets must be in the
     same order.  The default value is

          '"(<[{)>]}"'

'set/unset morespace'
     Use the blank line below the titlebar as extra editing space.

'set/unset mouse'
     Enable mouse support, so that mouse clicks can be used to place the
     cursor, set the mark (with a double click), or execute shortcuts.

'set/unset multibuffer'
     Allow inserting files into their own buffers.

'set/unset noconvert'
     Don't convert files from DOS/Mac format.

'set/unset nofollow'
     Don't follow symlinks when writing files.

'set/unset nohelp'
     Don't display the help lists at the bottom of the screen.

'set/unset nonewlines'
     Don't add newlines to the ends of files.

'set/unset nowrap'
     Don't hard-wrap text at all.

'set operatingdir "directory"'
     'nano' will only read and write files inside "directory" and its
     subdirectories.  Also, the current directory is changed to here, so
     files are inserted from this directory.  By default, the operating
     directory feature is turned off.

'set/unset poslog'
     Save the cursor position of files between editing sessions.

'set/unset preserve'
     Preserve the XON and XOFF keys (^Q and ^S).

'set punct "string"'
     Set the characters treated as closing punctuation when justifying
     paragraphs.  This may not include blank characters.  Only the
     specified closing punctuation, optionally followed by closing
     brackets (see "brackets"), can end sentences.  The default value is
     '"!.?"'.

'set/unset quickblank'
     Do quick statusbar blanking.  Statusbar messages will disappear
     after 1 keystroke instead of 25.

'set/unset quiet'
     When set, 'nano' will not report errors in the nanorc file nor ask
     them to be acknowledged by pressing Enter at startup.  If this
     option is used, it should be placed at the top of the file to be
     fully effective.

'set quotestr "string"'
     The email-quote string, used to justify email-quoted paragraphs.
     This is an extended regular expression if your system supports
     them, otherwise a literal string.  The default value is

          '"^([ \\t]*[#:>\\|}])+"'

     if you have extended regular expression support, and "> "
     otherwise.  Note that '\\t' stands for a literal Tab character.

'set/unset rebinddelete'
     Interpret the Delete key differently so that both Backspace and
     Delete work properly.  You should only need to use this option if
     Backspace acts like Delete on your system.

'set/unset rebindkeypad'
     Interpret the numeric keypad keys so that they all work properly.
     You should only need to use this option if they don't, as mouse
     support won't work properly with this option enabled.

'set/unset regexp'
     Do extended regular expression searches by default.

'set/unset smarthome'
     Make the Home key smarter.  When Home is pressed anywhere but at
     the very beginning of non-whitespace characters on a line, the
     cursor will jump to that beginning (either forwards or backwards).
     If the cursor is already at that position, it will jump to the true
     beginning of the line.

'set/unset smooth'
     Use smooth scrolling by default.

'set/unset softwrap'
     Enable soft line wrapping for easier viewing of very long lines.

'set speller "spellprog"'
     Use spelling checker "spellprog" instead of the built-in one, which
     calls "spell".

'set statuscolor fgcolor,bgcolor'
     Specify the color combination to use for the statusbar.  See "set
     titlecolor" for more details.

'set/unset suspend'
     Allow 'nano' to be suspended.

'set tabsize "n"'
     Use a tab size of "n" columns.  The value of "n" must be greater
     than 0.  The default value is 8.

'set/unset tabstospaces'
     Convert typed tabs to spaces.

'set/unset tempfile'
     Save automatically on exit, don't prompt.

'set titlecolor fgcolor,bgcolor'
     Specify the color combination to use for the titlebar.  Valid color
     names for foreground and background are: white, black, red, blue,
     green, yellow, magenta, and cyan.  And either "fgcolor" or
     ",bgcolor" may be left out.

'set/unset undo'
     Enable the experimental generic-purpose undo/redo code.

'set/unset view'
     Disallow file modification.

'set whitespace "string"'
     Set the two characters used to indicate the presence of tabs and
     spaces.  They must be single-column characters.  The default pair
     for a UTF-8 locale is "»·", and for other locales ">.".

'set/unset wordbounds'
     Detect word boundaries more accurately by treating punctuation
     characters as part of a word.


File: nano.info,  Node: Syntax Highlighting,  Next: Rebinding Keys,  Prev: Settings,  Up: Nanorc Files

5.2 Syntax Highlighting
=======================

Coloring the different syntactic elements of a file can be defined via
the following commands in a nanorc file:

'syntax "str" ["fileregex" ...]'
     Defines a syntax named "str" which can be activated via the
     -Y/-syntax command-line option, or will be automatically activated
     if the current filename matches the extended regular expression
     "fileregex".  All following "color" and "icolor" statements will
     apply to this "str" syntax until a new syntax is defined.

     The "none" syntax is reserved; specifying it on the command line is
     the same as not having a syntax at all.  The "default" syntax is
     special: it takes no "fileregex", and applies to files that don't
     match any other syntax's "fileregex".

'linter program [arg ...]'
     For the currently defined syntax, use the given program to invoke
     the linter (this overrides the speller function when defined).

'header "regex" ...'
     For the currently defined syntax, add one or more regexes which
     will be compared against the very first line of the file to be
     edited, to determine whether this syntax should be used for that
     file.

'magic ["regex" ...]'
     For the currently defined syntax, add one or more regexes which
     will be compared against the result of querying the magic database
     about the file to be edited, to determine whether this syntax
     should be used for that file.  This functionality only works when
     libmagic is installed on the system and will be silently ignored
     otherwise.

'color fgcolor,bgcolor "regex" ...'
     For the currently defined syntax, display all expressions matching
     the extended regular expression "regex" with foreground color
     "fgcolor" and background color "bgcolor", at least one of which
     must be specified.  Valid colors for foreground and background are:
     white, black, red, blue, green, yellow, magenta, and cyan.  You may
     use the prefix "bright" to get a stronger color highlight for the
     foreground.  If your terminal supports transparency, not specifying
     a "bgcolor" tells 'nano' to attempt to use a transparent
     background.

'icolor fgcolor,bgcolor "regex" ...'
     Same as above, except that the expression matching is case
     insensitive.

'color fgcolor,bgcolor start="sr" end="er"'
     Display expressions which start with the extended regular
     expression "sr" and end with the extended regular expression "er"
     with foreground color "fgcolor" and background color "bgcolor", at
     least one of which must be specified.  This allows syntax
     highlighting to span multiple lines.  Note that all subsequent
     instances of "sr" after an initial "sr" is found will be
     highlighted until the first instance of "er".

'icolor fgcolor,bgcolor start="sr" end="er"'
     Same as above, except that the expression matching is case
     insensitive.

'include "syntaxfile"'
     Read in self-contained color syntaxes from "syntaxfile".  Note that
     "syntaxfile" can only contain the above commands, from "syntax" to
     "icolor".

'extendsyntax str directive [arg ...]'
     Extend the syntax previously defined as str to include new
     information.  Allows you to add a new color, icolor, magic, header,
     or linter directive to an already defined syntax.  Useful when you
     want to add to definitions from the system-installed syntax
     definitions (which are normally not writable).


File: nano.info,  Node: Rebinding Keys,  Prev: Syntax Highlighting,  Up: Nanorc Files

5.3 Rebinding Keys
==================

Key bindings may be reassigned via the following two commands in a
nanorc file:

'bind key function menu'
     Rebinds 'key' to 'function' in the context of 'menu' (or in all
     menus where the function exists by using 'all').

'unbind key menu'
     Unbinds 'key' from the specified 'menu' (or from all menus where it
     exists by using 'all').

   The format of 'key' should be one of:

'^'
     followed by an alpha character or the word "Space".  Example: '^C'

'M-'
     followed by a printable character or the word "Space".  Example:
     'M-C'

'F'
     followed by a numeric value from 1 to 16.  Example: 'F10'

   Valid names for the 'function' to be bound are:

'help'
     Invokes the help viewer.

'cancel'
     Cancels the current command.

'exit'
     Exits from the program (or from the help viewer or the file
     browser).

'writeout'
     Writes the current buffer to disk.

'insert'
     Inserts a file into the current buffer (or into a new buffer when
     multibuffer is enabled).

'whereis'
     Searches for text in the current buffer.

'searchagain'
     Repeats the last search command.

'replace'
     Interactively replaces text within the current buffer.

'cut'
     Cuts and stores the current line (or the marked region).

'copytext'
     Copies the current line (or the marked region) without deleting it.

'uncut'
     Copies the currently stored text into the current buffer at the
     current cursor position.

'mark'
     Sets the mark at the current position, to start selecting text.

'cutrestoffile'
     Cuts all text from the cursor position till the end of the buffer.

'curpos'
     Shows the current cursor position: the line, column, and character
     positions.

'wordcount'
     Counts the number of words, lines and characters in the current
     buffer.

'speller'
     Invokes a spell-checking program (or a linting program, if the
     current syntax highlighting defines one).

'justify'
     Justifies the current paragraph.

'fulljustify'
     Justifies the entire current buffer.

'indent'
     Indents (shifts to the right) the currently marked text.

'unindent'
     Unindents (shifts to the left) the currently marked text.

'left'
     Goes left one position (in the editor or browser).

'right'
     Goes right one position (in the editor or browser).

'up'
     Goes one line up (in the editor or browser).

'down'
     Goes one line down (in the editor or browser).

'scrollup'
     Scrolls up one line of text from the current position.

'scrolldown'
     Scrolls down one line of text from the current position.

'nextword'
     Moves the cursor to the beginning of the next word.

'prevword'
     Moves the cursor to the beginning of the previous word.

'home'
     Moves the cursor to the beginning of the current line.

'end'
     Moves the cursor to the end of the current line.

'beginpara'
     Moves the cursor to the beginning of the current paragraph.

'endpara'
     Moves the cursor to the end of the current paragraph.

'prevpage'
     Goes up one screenful.

'nextpage'
     Goes down one screenful.

'firstline'
     Goes to the first line of the file.

'lastline'
     Goes to the last line of the file.

'gotoline'
     Goes to a specific line (and column if specified).

'findbracket'
     Moves the cursor to the bracket (brace, parenthesis, etc.)  that
     matches (pairs) with the one under the cursor.

'prevbuf'
     Switches to editing/viewing the previous buffer when using
     multibuffer mode.

'nextbuf'
     Switches to editing/viewing the next buffer when using multibuffer
     mode.

'verbatim'
     Inserts the next character verbatim into the file.

'tab'
     Inserts a tab at the current cursor location.

'enter'
     Inserts a new line below the current one.

'delete'
     Deletes the character under the cursor.

'backspace'
     Deletes the character before the cursor.

'undo'
     Undoes the last performed text action (add text, delete text, etc).

'redo'
     Redoes the last undone action (i.e., it undoes an undo).

'refresh'
     Refreshes the screen.

'suspend'
     Suspends the editor (if the suspending function is enabled, see the
     "suspendenable" entry below).

'casesens'
     Toggles case sensitivity in searching (search/replace menus only).

'regexp'
     Toggles whether searching/replacing is based on literal strings or
     regular expressions.

'backwards'
     Toggles whether searching/replacing goes forward or backward.

'prevhistory'
     Shows the previous history entry in the prompt menus (e.g.
     search).

'nexthistory'
     Shows the next history entry in the prompt menus (e.g.  search).

'dontreplace'
     Switches back to searching instead of replacing.

'gototext'
     Searches for files matching a string in the file browser (reading
     or writing files).

'dosformat'
     When writing a file, switches to writing a DOS format (CR/LF).

'macformat'
     When writing a file, switches to writing a Mac format.

'append'
     When writing a file, appends to the end instead of overwriting.

'prepend'
     When writing a file, 'prepends' (writes at the beginning) instead
     of overwriting.

'backup'
     When writing a file, creates a backup of the current file.

'firstfile'
     Goes to the first file when using the file browser (reading or
     writing files).

'lastfile'
     Goes to the last file when using the file browser (reading or
     writing files).

'nohelp'
     Toggles the presence of the two-line list of key bindings at the
     bottom of the screen.

'constupdate'
     Toggles the constant display of the current line, column, and
     character positions.

'morespace'
     Toggles the presence of the blank line which 'separates' the
     titlebar from the file text.

'smoothscroll'
     Toggles smooth scrolling (when moving around with the arrow keys).

'softwrap'
     Toggles the displaying of overlong lines on multiple screen lines.

'whitespacedisplay'
     Toggles the showing of whitespace.

'nosyntax'
     Toggles syntax highlighting.

'smarthome'
     Toggles the smartness of the Home key.

'autoindent'
     Toggles whether new lines will contain the same amount of
     whitespace as the preceding line.

'cuttoend'
     Toggles whether cutting text will cut the whole line or just from
     the current cursor position to the end of the line.

'nowrap'
     Toggles whether long lines will be hard-wrapped to the next line.

'tabstospaces'
     Toggles whether typed tabs will be converted to spaces.

'backupfile'
     Toggles whether a backup will be made of the file to be edited.

'multibuffer'
     Toggles the use of multiple file buffers (if available).

'mouse'
     Toggles mouse support.

'noconvert'
     Toggles automatic conversion of files from DOS/Mac format.

'suspendenable'
     Toggles whether the suspend sequence (normally ^Z) will suspend the
     editor window.

   Valid names for 'menu' are:

'main'
     The main editor window where text is entered and edited.

'search'
     The search menu (AKA whereis).

'replace'
     The 'search to replace' menu.

'replacewith'
     The 'replace with' menu, which comes up after 'search to replace'.

'gotoline'
     The 'goto line (and column)' menu.

'writeout'
     The 'write file' menu.

'insert'
     The 'insert file' menu.

'extcmd'
     The menu for inserting output from an external command, reached
     from the insert menu.

'help'
     The help-viewer menu.

'spell'
     The interactive spell checker Yes/no menu.

'linter'
     The linter menu.

'browser'
     The file browser for inserting or writing a file.

'whereisfile'
     The 'search for a file' menu in the file browser.

'gotodir'
     The 'go to directory' menu in the file browser.

'all'
     A special name meaning: apply to all menus where this function
     exists.


File: nano.info,  Node: The File Browser,  Next: Pico Compatibility,  Prev: Nanorc Files,  Up: Top

6 The File Browser
******************

When reading or writing files, pressing ^T will invoke the file browser.
Here, one can navigate directories in a graphical manner in order to
find the desired file.

   Basic movement in the file browser is accomplished with the arrow
keys, page up, and page down.  More advanced movement is accomplished by
searching via ^W (or 'w') and changing directories via ^_ (or 'g').  The
behavior of the Enter (or 's') key varies by what is currently selected.
If the currently selected object is a directory, the file browser will
enter and display the contents of the directory.  If the object is a
file, this filename and path are copied to the statusbar, and the file
browser exits.


File: nano.info,  Node: Pico Compatibility,  Next: Building and Configure Options,  Prev: The File Browser,  Up: Top

7 Pico Compatibility
********************

'nano' attempts to emulate Pico as closely as possible, but there are
certain differences between the editors:

'Search and Replace History'
     As of version 1.1.99pre1 of 'nano', text entered as search or
     replace strings will be stored and can be accessed with the up/down
     arrow keys.  Previously, 'nano' offered a more consistent, but
     incompatible with Pico, method for entering search and replace
     strings.  In the old method, previous entries would be displayed by
     default as editable text in front of the cursor, as opposed to
     being bracketed and uneditable as it is in Pico.  The old behavior
     could be made compatible with Pico via the '-p' option, but recent
     versions of Pico use the '-p' option to preserve the XON and XOFF
     sequences within the editor.  Since, with the new method, search
     and replace strings can still be edited by simply hitting the up
     arrow key once, the old method was removed completely.

'Writing, Appending, or Prepending Selected Text to Files'
     Text selected using the marking key (^^) can be written out,
     appended, or prepended to a new or existing file using the WriteOut
     key (^O).

'Toggles'
     Many options which alter the functionality of the program can be
     "toggled" on or off using Meta key sequences, meaning the program
     does not have to be restarted to turn a particular feature of the
     editor on or off.  Please see the internal help function (^G) for a
     list of what functions can be toggled for a particular version of
     'nano'.  See *Note Feature Toggles::, for more info.

'Cursor Position Display'
     The output of the "Display Cursor Position" in 'nano' displays the
     current line position of the cursor, as well as the column and
     total character position.

'Interactive Replace and Spell Checker'
     It is worth noting that 'nano''s replace function is interactive,
     i.e.  it does not stop after one search string was found and
     automatically replaced.  The 'nano' implementation will pause at
     each found search string and query whether to replace this instance
     or not.  The internal spell checker operates similarly.  Note that
     there is no way to force these functions to behave in the Pico
     fashion.  As of version 1.1.99pre1, misspelled words are sorted and
     trimmed for uniqueness in the internal spell checker such that the
     words 'apple' and 'Apple' will be prompted for correction
     separately.


File: nano.info,  Node: Building and Configure Options,  Prev: Pico Compatibility,  Up: Top

8 Building and Configure Options
********************************

Building 'nano' from source is fairly straightforward if you are
familiar with compiling programs with autoconf support:

   * tar xvfz nano-x.y.z.tar.gz (where x.y.z is the version of 'nano')
   * cd nano-x.y.z/
   * ./configure
   * make
   * make install

   The possible options to './configure' are:

'--disable-browser'
     Disable the mini file browser when reading or writing files.

'--disable-color'
     Disable support for syntax coloring of files using the nanorc file.

'--disable-extra'
     Disable extra features.  At the moment, this is just
     easter-egg-type stuff.

'--disable-help'
     Disable the help function.  Doing this makes the binary much
     smaller, but makes it difficult for new users to learn more than
     very basic things about using the editor.

'--disable-justify'
     Disable the justify and unjustify functions.

'--disable-libmagic'
     Disable the use of the library of magic-number tests (for
     determining the file type and thus which syntax to use for
     colouring - often the tests on filename extension and header line
     will be enough).

'--disable-mouse'
     Disable all mouse functionality.  This also eliminates the -m
     command-line option, which enables the mouse functionality.

'--disable-multibuffer'
     Disable support for opening multiple files at a time and switching
     between them on the fly.

'--disable-nanorc'
     Disable support for reading the nanorc files at startup.  With such
     support, you can store custom settings in a system-wide and a
     per-user nanorc file rather than having to pass command-line
     options to get the desired behavior.  See *Note Nanorc Files::, for
     more info.

'--disable-operatingdir'
     Disable setting the operating directory.  This also eliminates the
     -o command-line option, which sets the operating directory.

'--disable-speller'
     Disable use of the spell checker.  This also eliminates the -s
     command-line option, which allows specifying an alternate spell
     checker.

'--disable-tabcomp'
     Disable the tab completion code when reading or writing files.

'--disable-wrapping'
     Disable hard-wrapping of overlong lines.  This also eliminates the
     -w command-line option, which enables long-line wrapping.

'--enable-tiny'
     This option disables all the above.  It also disables some of the
     larger internals of the editor, like the marking code and the
     cut-to-end-of-line code.  It also disables the function toggles.

'--enable-debug'
     Enable support for runtime debug output.  This can get pretty
     messy, so chances are you only want this feature when you're
     working on the nano source.

'--disable-nls'
     Disables Native Language support.  This will disable use of the
     available GNU 'nano' translations.

'--disable-wrapping-as-root'
     Disable hard-wrapping of overlong lines by default when 'nano' is
     run as root.

'--enable-utf8'
     Enable support for reading and writing Unicode files.  This will
     require either a wide version of curses, or a UTF-8-enabled version
     of Slang.

'--disable-utf8'
     Disable support for reading and writing Unicode files.  Normally
     the configure script auto-detects whether to enable UTF-8 support
     or not.  You can use this or the previous option to override that
     detection.

'--with-slang'
     Compile 'nano' against Slang instead of against ncurses or other
     curses libraries.



Tag Table:
Node: Top199
Node: Introduction550
Node: Overview990
Node: Command Line Options1874
Ref: Expert Mode8834
Node: Editor Basics9791
Node: Entering Text10071
Node: Special Functions10397
Node: The Cutbuffer11437
Node: The Mark12124
Node: The Titlebar12861
Node: The Statusbar13577
Node: Shortcut Lists14150
Node: Using the Mouse14430
Node: Online Help15023
Node: Feature Toggles15399
Node: Nanorc Files17510
Node: Settings18732
Ref: Whitespace25594
Node: Syntax Highlighting25952
Node: Rebinding Keys29553
Node: The File Browser37504
Node: Pico Compatibility38326
Node: Building and Configure Options40986

End Tag Table
